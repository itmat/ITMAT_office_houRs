[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "This is the companion website for the ITMAT office houRs. It’s under active development (as are my web programming skills) and will change a lot, so thank you in advance for your patience.\n\n\n\n Back to top"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above.\n\n\n\nFor these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "For these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.1 Posit Cloud",
    "text": "2.1 Posit Cloud\nPosit, the company behind RStudio, provides a cloud-based infrastructure you can use to run RStudio through your web browser. This service is called ‘Posit Cloud’ and is accessible here. You need to create an account to access Posit Cloud and select a subscription tier. While the paid tiers offer more powerful compute resources, more storage, and more compute time, the free tier should be enough to run the R code in these lessons.\nWhen you launch Posit Cloud through your web browser, you have access to a fully featured instance of the RStudio app that is running on the cloud. This means that you can access and run RStudio anywhere you can open a web browser. It also means you’ll need to upload any data files you want to work on to the cloud servers, and download any results you want to store on your local computer. These upload/download procedures are pretty simple.\nLastly, the RStudio workspaces on Posit Cloud are persistent. This means that if you make changes to the R environment (e.g. by installing an R package) or upload files to Posit Cloud on one computer, the service saves these changes so you’ll have access to the same R environment and files when you login to Posit Cloud from another computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.2 WebR",
    "text": "2.2 WebR\nWebAssembly is a recent effort to develop tools for running complex programs in a web browser. WebR is a version of R that’s designed to use WebAssembly to run R code. You can find information on WebR on this page. The authors of WebR have created a bare-bones WebR editor that mimics RStudio’s layout and lets you write and run R code in your browser (https://webr.r-wasm.org/latest/).\nWhile this WebR editor may seem similar to Posit Cloud, in that you’re accessing an R programming environment through your web browser, the big difference lies in where the R code is actually running. In Posit Cloud, all of the computations are happening on an RStudio server located somewhere else (probably an AWS warehouse). The Posit Cloud website acts as a portal that lets you communicate with this server, as if you’re running RStudio on your computer. WebR actually is running on your computer, inside your web browser. This means all of the computations are happening on your local computer and not on a cloud server.\nThis also means that the WebR environment is not persistent. With Posit Cloud, any changes you make to the R environment are saved to the cloud server, so you see these changes the next time you open Posit Cloud. Since the R environment for WebR is running inside your web browser, it ends when you close your web browser (or the tab that’s running WebR). This means you’ll need to re-install the R packages you want to use every time you load WebR.\nWhile WebR does provide an alternative to running RStudio on your computer or through Posit Cloud, it should be your last resort for running the R code in these lessons. WebR is relatively new and still under active development, which means things could break/change without much warning. Also, while the WebR editor visually resembles RStudio, it’s really a demo of what WebR can do and lacks RStudio’s helpful features. All that being said, it’s still worth knowing about WebR. It’s just plain cool and opens up a lot of possibilities for how we can share data analyses and visualizations with each other."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.1 Base R",
    "text": "3.1 Base R\nThe functions and code included with every R installation are part of R’s base packages, also know as base R. The base packages include quite a bit of functionality on their own, providing us with functions for reading/writing files, mathematical calculations, graphing/plotting, as well as the framework upon which all other packages are built.\nWhile base R has its advantages, it can be a bit esoteric, particularly when you’re first starting out. We want to use packages to make our lives easier and our code more readable.\nThe R Foundation maintains a central repository and archive of R packages, known as CRAN (Comprehensive R Archive Network). Below, we’ll the install.packages() function to download and install some useful R packages from CRAN."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.2 The tidyverse",
    "text": "3.2 The tidyverse\nThe tidyverse is a family of packages that will make it easier for us to read data from files, plot graphs, and generally wrangle data into useful formats. The bulk of these lessons (at least the early ones) are built around using various tidyverse packages to work with data.\nSince the tidyverse is not included with base R, we need to install it before we can use it. Run the following code to download and install the tidyverse packages:\n\ninstall.packages(\"tidyverse\")\n\nEven though we’ve downloaded and installed the tidyverse packages, we still can’t use any of their functions. Whenever we start a new R/RStudio session, it only loads the base R packages. This means R always starts quickly, no matter how many packages we’ve installed. It also means we have complete control over which packages are loaded into memory at any given time. Generally, we only want to load packages we know we’re going to use in the current R session. This keeps R’s memory footprint as small as possible, leaving more room for our data.\nWe load installed packages with the library() function. Note, when we load packages we don’t need to enclose the package names in quotation marks, like we did when running the install.packages() function.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.3 Palmer Penguins",
    "text": "3.3 Palmer Penguins\n\n\n\nArtwork by @allison_horst\n\n\nNow that we’ve installed some tools to help us visualize and wrangle some data, we need a dataset to work with. For these lessons, we’ll start with the Palmer Penguins dataset.\nThe Palmer Penguins dataset contains anatomical and physiological measurements collected from three penguin species living on several islands near the Palmer Research Station in Antarctica. These data were collected by Dr. Kristin B. Gorman and the Palmer Station Long Term Ecological Research (LTER) program. This work was originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081.\n\nDr. Allison Horst, Dr. Alison Hill, and Dr. Kristen Gorman wrapped these data into the palmerpenguins R package.\n\n\n\nArtwork by @allison_horst\n\n\nHere, we’ll use the install.packages() function to install the \"palmerpenguins\" package. Construct this command and run it:\n\ninstall.packages(\"palmerpenguins\")\n\nNow that we’ve downloaded and installed the palmerpenguins package, use the library() function to load it.\n\nlibrary(palmerpenguins)\n\nNow that we’ve installed R, RStudio, and the tidyverse and palmerpenguins R packages, our computers are ready for the introductory R lessons."
  },
  {
    "objectID": "lessons.html",
    "href": "lessons.html",
    "title": "Lessons",
    "section": "",
    "text": "Note\n\n\n\nTo download a file from the list below, right-click on the link and select the “Save Link As…” option (on Firefox). The specific text for this option might be a little different, depending on your web browser.\n\n\n\n\nLesson 0: R and RStudio setup\n\nView completed lesson\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\n\n\nLesson 1: Visualizing data with ggplot2\n\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\nGraph image (save to IMAGES/ subdirectory)\n\n\nLesson 2: Working with tabular data\n\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\nData file (save to DATA/ subdirectory)\n\n\n\n\n\n\n Back to top"
  }
]