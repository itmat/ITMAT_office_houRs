[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "This is the companion website for the ITMAT office houRs. It’s under active development (as are my web programming skills) and will change a lot, so thank you in advance for your patience.\n\n\n\n Back to top"
  },
  {
    "objectID": "website_quarto_docs/lessons.html",
    "href": "website_quarto_docs/lessons.html",
    "title": "Lessons",
    "section": "",
    "text": "Lesson 0: R and RStudio setup\n\nView original lesson\nView completed lesson\nDownloads:\n\nQuarto doc\n\n\nLesson 1: Visualizing data with ggplot2\n\nView original lesson\nDownloads:\n\nQuarto doc\nGraph image (save to images subdirectory)\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above.\n\n\n\nFor these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "For these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.1 Posit Cloud",
    "text": "2.1 Posit Cloud\nPosit, the company behind RStudio, provides a cloud-based infrastructure you can use to run RStudio through your web browser. This service is called ‘Posit Cloud’ and is accessible here. You need to create an account to access Posit Cloud and select a subscription tier. While the paid tiers offer more powerful compute resources, more storage, and more compute time, the free tier should be enough to run the R code in these lessons.\nWhen you launch Posit Cloud through your web browser, you have access to a fully featured instance of the RStudio app that is running on the cloud. This means that you can access and run RStudio anywhere you can open a web browser. It also means you’ll need to upload any data files you want to work on to the cloud servers, and download any results you want to store on your local computer. These upload/download procedures are pretty simple.\nLastly, the RStudio workspaces on Posit Cloud are persistent. This means that if you make changes to the R environment (e.g. by installing an R package) or upload files to Posit Cloud on one computer, the service saves these changes so you’ll have access to the same R environment and files when you login to Posit Cloud from another computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.2 WebR",
    "text": "2.2 WebR\nWebAssembly is a recent effort to develop tools for running complex programs in a web browser. WebR is a version of R that’s designed to use WebAssembly to run R code. You can find information on WebR on this page. The authors of WebR have created a bare-bones WebR editor that mimics RStudio’s layout and lets you write and run R code in your browser (https://webr.r-wasm.org/latest/).\nWhile this WebR editor may seem similar to Posit Cloud, in that you’re accessing an R programming environment through your web browser, the big difference lies in where the R code is actually running. In Posit Cloud, all of the computations are happening on an RStudio server located somewhere else (probably an AWS warehouse). The Posit Cloud website acts as a portal that lets you communicate with this server, as if you’re running RStudio on your computer. WebR actually is running on your computer, inside your web browser. This means all of the computations are happening on your local computer and not on a cloud server.\nThis also means that the WebR environment is not persistent. With Posit Cloud, any changes you make to the R environment are saved to the cloud server, so you see these changes the next time you open Posit Cloud. Since the R environment for WebR is running inside your web browser, it ends when you close your web browser (or the tab that’s running WebR). This means you’ll need to re-install the R packages you want to use every time you load WebR.\nWhile WebR does provide an alternative to running RStudio on your computer or through Posit Cloud, it should be your last resort for running the R code in these lessons. WebR is relatively new and still under active development, which means things could break/change without much warning. Also, while the WebR editor visually resembles RStudio, it’s really a demo of what WebR can do and lacks RStudio’s helpful features. All that being said, it’s still worth knowing about WebR. It’s just plain cool and opens up a lot of possibilities for how we can share data analyses and visualizations with each other."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.1 Base R",
    "text": "3.1 Base R\nThe functions and code included with every R installation are part of R’s base packages, also know as base R. The base packages include quite a bit of functionality on their own, providing us with functions for reading/writing files, mathematical calculations, graphing/plotting, as well as the framework upon which all other packages are built.\nWhile base R has its advantages, it can be a bit esoteric, particularly when you’re first starting out. We want to use packages to make our lives easier and our code more readable.\nThe R Foundation maintains a central repository and archive of R packages, known as CRAN (Comprehensive R Archive Network). Below, we’ll the install.packages() function to download and install some useful R packages from CRAN."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.2 The tidyverse",
    "text": "3.2 The tidyverse\nThe tidyverse is a family of packages that will make it easier for us to read data from files, plot graphs, and generally wrangle data into useful formats. The bulk of these lessons (at least the early ones) are built around using various tidyverse packages to work with data.\nSince the tidyverse is not included with base R, we need to install it before we can use it. Run the following code to download and install the tidyverse packages:\n\ninstall.packages(\"tidyverse\")\n\nEven though we’ve downloaded and installed the tidyverse packages, we still can’t use any of their functions. Whenever we start a new R/RStudio session, it only loads the base R packages. This means R always starts quickly, no matter how many packages we’ve installed. It also means we have complete control over which packages are loaded into memory at any given time. Generally, we only want to load packages we know we’re going to use in the current R session. This keeps R’s memory footprint as small as possible, leaving more room for our data.\nWe load installed packages with the library() function. Note, when we load packages we don’t need to enclose the package names in quotation marks, like we did when running the install.packages() function.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.3 Palmer Penguins",
    "text": "3.3 Palmer Penguins\n\n\n\nArtwork by @allison_horst\n\n\nNow that we’ve installed some tools to help us visualize and wrangle some data, we need a dataset to work with. For these lessons, we’ll start with the Palmer Penguins dataset.\nThe Palmer Penguins dataset contains anatomical and physiological measurements collected from three penguin species living on several islands near the Palmer Research Station in Antarctica. These data were collected by Dr. Kristin B. Gorman and the Palmer Station Long Term Ecological Research (LTER) program. This work was originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081.\n\nDr. Allison Horst, Dr. Alison Hill, and Dr. Kristen Gorman wrapped these data into the palmerpenguins R package.\n\n\n\nArtwork by @allison_horst\n\n\nHere, we’ll use the install.packages() function to install the \"palmerpenguins\" package. Construct this command and run it:\n\ninstall.packages(\"palmerpenguins\")\n\nNow that we’ve downloaded and installed the palmerpenguins package, use the library() function to load it.\n\nlibrary(palmerpenguins)\n\nNow that we’ve installed R, RStudio, and the tidyverse and palmerpenguins R packages, our computers are ready for the introductory R lessons."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above.\n\n\n\nFor these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "For these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.1 Posit Cloud",
    "text": "2.1 Posit Cloud\nPosit, the company behind RStudio, provides a cloud-based infrastructure you can use to run RStudio through your web browser. This service is called ‘Posit Cloud’ and is accessible here. You need to create an account to access Posit Cloud and select a subscription tier. While the paid tiers offer more powerful compute resources, more storage, and more compute time, the free tier should be enough to run the R code in these lessons.\nWhen you launch Posit Cloud through your web browser, you have access to a fully featured instance of the RStudio app that is running on the cloud. This means that you can access and run RStudio anywhere you can open a web browser. It also means you’ll need to upload any data files you want to work on to the cloud servers, and download any results you want to store on your local computer. These upload/download procedures are pretty simple.\nLastly, the RStudio workspaces on Posit Cloud are persistent. This means that if you make changes to the R environment (e.g. by installing an R package) or upload files to Posit Cloud on one computer, the service saves these changes so you’ll have access to the same R environment and files when you login to Posit Cloud from another computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#webr",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#webr",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.2 WebR",
    "text": "2.2 WebR\nWebAssembly is a recent effort to develop tools for running complex programs in a web browser. WebR is a version of R that’s designed to use WebAssembly to run R code. You can find information on WebR on this page. The authors of WebR have created a bare-bones WebR editor that mimics RStudio’s layout and lets you write and run R code in your browser (https://webr.r-wasm.org/latest/).\nWhile this WebR editor may seem similar to Posit Cloud, in that you’re accessing an R programming environment through your web browser, the big difference lies in where the R code is actually running. In Posit Cloud, all of the computations are happening on an RStudio server located somewhere else (probably an AWS warehouse). The Posit Cloud website acts as a portal that lets you communicate with this server, as if you’re running RStudio on your computer. WebR actually is running on your computer, inside your web browser. This means all of the computations are happening on your local computer and not on a cloud server.\nThis also means that the WebR environment is not persistent. With Posit Cloud, any changes you make to the R environment are saved to the cloud server, so you see these changes the next time you open Posit Cloud. Since the R environment for WebR is running inside your web browser, it ends when you close your web browser (or the tab that’s running WebR). This means you’ll need to re-install the R packages you want to use every time you load WebR.\nWhile WebR does provide an alternative to running RStudio on your computer or through Posit Cloud, it should be your last resort for running the R code in these lessons. WebR is relatively new and still under active development, which means things could break/change without much warning. Also, while the WebR editor visually resembles RStudio, it’s really a demo of what WebR can do and lacks RStudio’s helpful features. All that being said, it’s still worth knowing about WebR. It’s just plain cool and opens up a lot of possibilities for how we can share data analyses and visualizations with each other."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#base-r",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#base-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.1 Base R",
    "text": "3.1 Base R\nThe functions and code included with every R installation are part of R’s base packages, also know as base R. The base packages include quite a bit of functionality on their own, providing us with functions for reading/writing files, mathematical calculations, graphing/plotting, as well as the framework upon which all other packages are built.\nWhile base R has its advantages, it can be a bit esoteric, particularly when you’re first starting out. We want to use packages to make our lives easier and our code more readable.\nThe R Foundation maintains a central repository and archive of R packages, known as CRAN (Comprehensive R Archive Network). Below, we’ll the install.packages() function to download and install some useful R packages from CRAN."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.2 The tidyverse",
    "text": "3.2 The tidyverse\nThe tidyverse is a family of packages that will make it easier for us to read data from files, plot graphs, and generally wrangle data into useful formats. The bulk of these lessons (at least the early ones) are built around using various tidyverse packages to work with data.\nSince the tidyverse is not included with base R, we need to install it before we can use it. Run the following code to download and install the tidyverse packages:\n\ninstall.packages(\"tidyverse\")\n\nEven though we’ve downloaded and installed the tidyverse packages, we still can’t use any of their functions. Whenever we start a new R/RStudio session, it only loads the base R packages. This means R always starts quickly, no matter how many packages we’ve installed. It also means we have complete control over which packages are loaded into memory at any given time. Generally, we only want to load packages we know we’re going to use in the current R session. This keeps R’s memory footprint as small as possible, leaving more room for our data.\nWe load installed packages with the library() function. Note, when we load packages we don’t need to enclose the package names in quotation marks, like we did when running the install.packages() function.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.3 Palmer Penguins",
    "text": "3.3 Palmer Penguins\n\n\n\nArtwork by @allison_horst\n\n\nNow that we’ve installed some tools to help us visualize and wrangle some data, we need a dataset to work with. For these lessons, we’ll start with the Palmer Penguins dataset.\nThe Palmer Penguins dataset contains anatomical and physiological measurements collected from three penguin species living on several islands near the Palmer Research Station in Antarctica. These data were collected by Dr. Kristin B. Gorman and the Palmer Station Long Term Ecological Research (LTER) program. This work was originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081.\n\nDr. Allison Horst, Dr. Alison Hill, and Dr. Kristen Gorman wrapped these data into the palmerpenguins R package.\n\n\n\nArtwork by @allison_horst\n\n\nHere, we’ll use the install.packages() function to install the \"palmerpenguins\" package. Construct this command and run it:\nNow that we’ve downloaded and installed the palmerpenguins package, use the library() function to load it.\nNow that we’ve installed R, RStudio, and the tidyverse and palmerpenguins R packages, our computers are ready for the introductory R lessons."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "",
    "text": "When we start R, we only have access to the base R packages. In order to use any additional packages, we need to load them into memory with the library() function.\nFor this lesson we’ll need two packages: ggplot2 and palmerpenguins. Run the following code chunk to load these two packages. Note, the second library command is empty. Modify the command so it loads the palmerpenguins package.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nIt’s good practice to start R code, stored in R scripts or quarto/Rmarkdown documents, by loading the packages we’ll be using in the body of the code. It gives readers, including future versions of ourselves, a consistent place to check all of the packages required to run our code."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#look-at-the-palmer-penguins-data-table",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#look-at-the-palmer-penguins-data-table",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "4.1 Look at the Palmer Penguins data table",
    "text": "4.1 Look at the Palmer Penguins data table\nAfter loading the palmerpenguins package, we now have access to table of penguin data. We can view the first 10 lines of this table directly in the R console:\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nEach row in this table contains data from a single penguin measurement during the study period. Looking at the columns, we see all of the different information the researchers recorded about each penguin. We can also see that there are observations with missing information, represented by NA values. In R terminology, this is called a data frame. It is a natural way of representing rectangular, spreadsheet-style data. The penguin data are technically stored as a tibble, which is a special type of data frame used by the tidyverse.\nThe palmerpenguins package also contains documentation for the penguin data frame. Look up “penguins” using the Help pane, or one of the other help functions. The documentation describes the contents of each column in the data frame.\nIn addition to viewing the data frame in the R console, we can use the View() function to quickly examine its contents in a scrollable, spreadsheet-style window.\n\nView(penguins)\n\nInside the view window, we can search the data frame for specific values, or re-order it by values in each of the columns. While the View() function is useful for smaller datasets, it is not generally suitable for data frames with more than a few thousand rows.\n\n\n\n\n\n\nThe “V” in the View() function is capitalized\n\n\n\nIf we try to use the View() function with a lower case “v”, we’ll generally get an error:\n\nview(penguins)\n\nError in view(penguins): could not find function \"view\"\n\n\n\n\nLastly, we can use the summary() function to get summary statistics about the data in each column of our data frame.\n\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\n\nThese functions help us building intuition about new datasets and spot potential problems for downstream analyses."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#visualize-w-ggplot2",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#visualize-w-ggplot2",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "4.2 Visualize the penguin data with ggplot2",
    "text": "4.2 Visualize the penguin data with ggplot2\nThe penguins data frame contains measurements of each penguin’s body mass and flipper length. Here we will use the ggplot2 package to visualize these data and examine the relationship between these two anatomical measurements.\nBelow we’ll review the code we need to create this graph: \n\n4.2.1 How to create a basic scatterplot\nWe start with the ggplot() function, which creates our ggplot and specifies the data we want to use. Think of this like setting up a blank canvas before we start painting. Note, we’re giving the ggplot() function access to the penguin data frame with the data argument.\n\nggplot(data = penguins)\n\n\n\n\nNext, we use the mapping argument to tell the ggplot() function how we want it to use the penguin data. In ggplot2, we always use the aes() function to define how to map the variables (columns) in our data to the visual properties (aesthetics) of the shapes we want to paint. In this example we want to plot body mass with the x-axis and flipper length with the y-axis.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm))\n\n\n\n\nNote how mapping the x/y aesthetics has affected the graph. The axes are now labeled and the ggplot() function has automatically set their ranges based on the range of body masses and flipper lengths in the penguin data frame.\nNow that we’ve prepared our canvas, we can start adding layers of paint. We paint shapes in ggplot2 using geom functions. Since we want to create a scatterplot, we’ll use the geom_point() function to add a layer of points to our plot. There is a whole family of different geom_ functions that we can use to plot different types of graphs (e.g. scatter plots, line graphs, bar graphs).\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNote that we combine the geom_point() function with the ggplot() function using the + sign. We can treat this like we’re “adding” a layer of points on top of the canvas we created with ggplot().\nAlso, take note of the warning we get from the ggplot2 code. Recall that we saw some columns with NA values when we were looking at the contents of the penguins data frame. The warning is telling us that two of the entries in the penguins data frame have NA values in either the body_mass_g or flipper_length_mm columns. The geom_point() function has no way of placing a point with a missing x- or y-coordinate, so ggplot2 automatically excludes rows with missing values before plotting. This filter only applies to columns (variables) in our data frame that we’re mapping to aesthetics. ggplot2 will still use rows in the penguins data frame that have NA values in the bill_length_mm and sex columns, since we’re not currently using those to plot anything.\nSo the general procedure we follow for plotting data with ggplot2 is to prepare our canvas with the ggplot() function, use the aes() function to tell ggplot2 how we want to use our data to paint the canvas, and apply paint to our canvas with a geom_ function (geom_point in the example above).\n\n\n4.2.2 Decorating our plots with more data\nNow that we have a basic scatterplot in hand, we can try to gain deeper insights into our data by incorporating more information into our plot. Our current scatterplot shows a positive relationship between flipper length and body mass. We know the penguin data frame contains measurements from three different penguin species. Let’s map species to the color aesthetic to see how this trend looks across all three species.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm,\n                     color = species)) +\n    geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNot only did ggplot2 automatically assign a different color to each penguin species, it also added a legend to the graph. That means this same block of code can work for a penguin data frame that contains data from one, two, or ten species of penguin.\nTo get a clearer picture of the trend between flipper length and body mass, we’re no going to add a regression line to the plot. We’ll do this with the geom_smooth() function. We’ll use the method = \"lm\" argument to specify we want to plot the line we get from fitting our data with a linear model.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm,\n                     color = species)) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nIt looks like geom_smooth() fit separate linear models for each penguin species and plotted the lines using the same colors as the points. While this is a useful feature (we’ll make use of this below), we want to fit all of the data with a single linear model. When we define aesthetic mappings in the ggplot() function, they apply to all geom_ functions in that plot. By mapping species to color, we told geom_smooth() we want it to color the smoothed line by species, which means it needs to fit a separate line for each species. To solve this problem we can specify an aesthetic mapping within a specific geom_ function. Let’s try moving the species to color mapping to geom_point() and geom_smooth(). Which option still colors the points by species, but fits all of the data with a single linear model?\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNow that we’ve sorted out the trend line, let’s return to how we’re plotting the points. The colors improve the readability of this graph, but could pose a problem if this figure is rendered in black and white, or if a reader has certain types of colorblindness. One solution is to map the points from different penguin species to different shapes. Try adding an aesthetic mapping of shape to species.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species)) +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNote that the legend automatically updates to reflect the new shape mapping.\nThe are many more aesthetics beyond shape and color. The documentation for geom_ functions contains a special section listing the aesthetic mappings supported by that geom. Look up the help page for “geom_point” and find the list of supported aesthetics.\nWe’re almost done recreating the figure we saw at the beginning of this section. The axis labels our version of the figure are not as clean, and we’re still missing the plot title and subtitle. Collectively, these attributes are known as the graph’s “labels”, and we can modify them using the labs() function.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species, shape = species)) +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Relationship between flipper length and body mass\",\n         subtitle = \"Across three species of penguins studied at the Palmer Research Station\",\n         x = \"Body mass (g)\",\n         y = \"Flipper length (mm)\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nLastly, we’ll change the color scheme to a different palette from the default. The ggplot2 package includes a few additional color palettes we can apply to our plot using scale_color_ functions. For now, we’ll select a palette from the ColorBrewer collection that is good for representing qualitative data and is more colorblind safe than the default palette.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species, shape = species)) +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Relationship between flipper length and body mass\",\n         subtitle = \"Across three species of penguins studied at the Palmer Research Station\",\n         x = \"Body mass (g)\",\n         y = \"Flipper length (mm)\") +\n    scale_color_brewer(palette = \"Dark2\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nFor now, we’re not going to worry about the specifics of the ColorBrewer collection of palettes (though feel free to examine the documentation for the scale_color_brewer() function). But we can see that we can further adjust how ggplot2 displays our data using the scale_ family of functions.\nWith that last tweak, we’ve successfully recreated the figure we saw above.\n\n\n4.2.3 Creating our own scatterplot\n\n\n\nArtwork by @allison_horst\n\n\nNow we’re going to put everything we just learned into practice. Using the penguins data and the ggplot2 functions, we’re going to create a scatterplot of bill depth vs bill length. We can view the contents of penguins data frame directly, or consult the documentation to find the names of the columns that contain this information. Again, we’ll add a regression line that we fit using all of the data.\nLooking at the graph we created, what does it suggest about a relationship between bill depth and bill length? How might species affect this? How does the graph change if we fit separate regression lines within each species?\nThe difference between these two graphs is an example of Simspon’s paradox. Briefly, this is a phenomenon where a trend between two variables at the population level disappears, emerges, or reverses when we divide the population into groups. We were able to observe these changes by experimenting with the way we visualized the penguin data.\nWe’re only just scratching the surface of what we can do with ggplot2, but we’ve used it to rapidly visualize the penguin data and generate some interesting observations. In the next lesson, we will explore some of these observations further by working directly with the data to calculate summary statistics."
  }
]