[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "This is the companion website for the ITMAT office houRs. It’s under active development (as are my web programming skills) and will change a lot, so thank you in advance for your patience.\n\n\n\n Back to top"
  },
  {
    "objectID": "website_quarto_docs/lessons.html",
    "href": "website_quarto_docs/lessons.html",
    "title": "Lessons",
    "section": "",
    "text": "Lesson 0: R and RStudio setup\n\nView completed lesson\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\n\n\nLesson 1: Visualizing data with ggplot2\n\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\nGraph image (save to IMAGES/ subdirectory)\n\n\nLesson 2: Working with tabular data\n\nDownloads:\n\nQuarto doc (save to LESSONS/ subdirectory)\nData file (save to DATA/ subdirectory)\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above.\n\n\n\nFor these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "For these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.1 Posit Cloud",
    "text": "2.1 Posit Cloud\nPosit, the company behind RStudio, provides a cloud-based infrastructure you can use to run RStudio through your web browser. This service is called ‘Posit Cloud’ and is accessible here. You need to create an account to access Posit Cloud and select a subscription tier. While the paid tiers offer more powerful compute resources, more storage, and more compute time, the free tier should be enough to run the R code in these lessons.\nWhen you launch Posit Cloud through your web browser, you have access to a fully featured instance of the RStudio app that is running on the cloud. This means that you can access and run RStudio anywhere you can open a web browser. It also means you’ll need to upload any data files you want to work on to the cloud servers, and download any results you want to store on your local computer. These upload/download procedures are pretty simple.\nLastly, the RStudio workspaces on Posit Cloud are persistent. This means that if you make changes to the R environment (e.g. by installing an R package) or upload files to Posit Cloud on one computer, the service saves these changes so you’ll have access to the same R environment and files when you login to Posit Cloud from another computer."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#webr",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.2 WebR",
    "text": "2.2 WebR\nWebAssembly is a recent effort to develop tools for running complex programs in a web browser. WebR is a version of R that’s designed to use WebAssembly to run R code. You can find information on WebR on this page. The authors of WebR have created a bare-bones WebR editor that mimics RStudio’s layout and lets you write and run R code in your browser (https://webr.r-wasm.org/latest/).\nWhile this WebR editor may seem similar to Posit Cloud, in that you’re accessing an R programming environment through your web browser, the big difference lies in where the R code is actually running. In Posit Cloud, all of the computations are happening on an RStudio server located somewhere else (probably an AWS warehouse). The Posit Cloud website acts as a portal that lets you communicate with this server, as if you’re running RStudio on your computer. WebR actually is running on your computer, inside your web browser. This means all of the computations are happening on your local computer and not on a cloud server.\nThis also means that the WebR environment is not persistent. With Posit Cloud, any changes you make to the R environment are saved to the cloud server, so you see these changes the next time you open Posit Cloud. Since the R environment for WebR is running inside your web browser, it ends when you close your web browser (or the tab that’s running WebR). This means you’ll need to re-install the R packages you want to use every time you load WebR.\nWhile WebR does provide an alternative to running RStudio on your computer or through Posit Cloud, it should be your last resort for running the R code in these lessons. WebR is relatively new and still under active development, which means things could break/change without much warning. Also, while the WebR editor visually resembles RStudio, it’s really a demo of what WebR can do and lacks RStudio’s helpful features. All that being said, it’s still worth knowing about WebR. It’s just plain cool and opens up a lot of possibilities for how we can share data analyses and visualizations with each other."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#base-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.1 Base R",
    "text": "3.1 Base R\nThe functions and code included with every R installation are part of R’s base packages, also know as base R. The base packages include quite a bit of functionality on their own, providing us with functions for reading/writing files, mathematical calculations, graphing/plotting, as well as the framework upon which all other packages are built.\nWhile base R has its advantages, it can be a bit esoteric, particularly when you’re first starting out. We want to use packages to make our lives easier and our code more readable.\nThe R Foundation maintains a central repository and archive of R packages, known as CRAN (Comprehensive R Archive Network). Below, we’ll the install.packages() function to download and install some useful R packages from CRAN."
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.2 The tidyverse",
    "text": "3.2 The tidyverse\nThe tidyverse is a family of packages that will make it easier for us to read data from files, plot graphs, and generally wrangle data into useful formats. The bulk of these lessons (at least the early ones) are built around using various tidyverse packages to work with data.\nSince the tidyverse is not included with base R, we need to install it before we can use it. Run the following code to download and install the tidyverse packages:\n\ninstall.packages(\"tidyverse\")\n\nEven though we’ve downloaded and installed the tidyverse packages, we still can’t use any of their functions. Whenever we start a new R/RStudio session, it only loads the base R packages. This means R always starts quickly, no matter how many packages we’ve installed. It also means we have complete control over which packages are loaded into memory at any given time. Generally, we only want to load packages we know we’re going to use in the current R session. This keeps R’s memory footprint as small as possible, leaving more room for our data.\nWe load installed packages with the library() function. Note, when we load packages we don’t need to enclose the package names in quotation marks, like we did when running the install.packages() function.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "href": "LESSONS/COMPLETED/Completed_Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.3 Palmer Penguins",
    "text": "3.3 Palmer Penguins\n\n\n\nArtwork by @allison_horst\n\n\nNow that we’ve installed some tools to help us visualize and wrangle some data, we need a dataset to work with. For these lessons, we’ll start with the Palmer Penguins dataset.\nThe Palmer Penguins dataset contains anatomical and physiological measurements collected from three penguin species living on several islands near the Palmer Research Station in Antarctica. These data were collected by Dr. Kristin B. Gorman and the Palmer Station Long Term Ecological Research (LTER) program. This work was originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081.\n\nDr. Allison Horst, Dr. Alison Hill, and Dr. Kristen Gorman wrapped these data into the palmerpenguins R package.\n\n\n\nArtwork by @allison_horst\n\n\nHere, we’ll use the install.packages() function to install the \"palmerpenguins\" package. Construct this command and run it:\n\ninstall.packages(\"palmerpenguins\")\n\nNow that we’ve downloaded and installed the palmerpenguins package, use the library() function to load it.\n\nlibrary(palmerpenguins)\n\nNow that we’ve installed R, RStudio, and the tidyverse and palmerpenguins R packages, our computers are ready for the introductory R lessons."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above.\n\n\n\nFor these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "The first thing we need to do is install a program that will allow our computers to read and execute R code. This is what we mean by “installing R.”\nFor general information on the current state of R you can visit the R Project homepage. To download the latest version of R, navigate to this page, click the link(s) specific to your operating system, and follow the instructions.\nThis will be a two step procedure for Windows and macOS users: first you’ll download the R installer from the above link, then you’ll run the installer on your computer. Windows users should select the ‘base’ version of R when given the choice between downloading ‘base’, ‘contrib’, and ‘old contrib’. After you’ve downloaded the installer, double-click it to run. You should be fine selecting the default choice when given the option to customize your installation. The customization options won’t affect how we interact with R, since we’ll be doing our work through RStudio.\nFor many Linux users, you’ll download and install R in one step using the package management software specific to your Linux distribution. The R page contains more detailed instructions for several common Linux distributions.\nAfter you complete the installation process, you should now have the ability to launch R as a stand-alone application on your computer. Note, the R application is separate from the R installer program you downloaded above."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#download-install-rstudio",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "",
    "text": "For these lessons, we’ll be using the RStudio program to write our code and interact with R. While you only need to install R to write and run R code on your computer, RStudio has several nice features that will make working with R a much more pleasant experience.\nTo download the latest version of the RStudio desktop app installer, go to this page and select the option specific to your operating system. Run the installer after the download is complete. At this point, you should be able to launch the Rstudio app on your computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#posit-cloud",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.1 Posit Cloud",
    "text": "2.1 Posit Cloud\nPosit, the company behind RStudio, provides a cloud-based infrastructure you can use to run RStudio through your web browser. This service is called ‘Posit Cloud’ and is accessible here. You need to create an account to access Posit Cloud and select a subscription tier. While the paid tiers offer more powerful compute resources, more storage, and more compute time, the free tier should be enough to run the R code in these lessons.\nWhen you launch Posit Cloud through your web browser, you have access to a fully featured instance of the RStudio app that is running on the cloud. This means that you can access and run RStudio anywhere you can open a web browser. It also means you’ll need to upload any data files you want to work on to the cloud servers, and download any results you want to store on your local computer. These upload/download procedures are pretty simple.\nLastly, the RStudio workspaces on Posit Cloud are persistent. This means that if you make changes to the R environment (e.g. by installing an R package) or upload files to Posit Cloud on one computer, the service saves these changes so you’ll have access to the same R environment and files when you login to Posit Cloud from another computer."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#webr",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#webr",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "2.2 WebR",
    "text": "2.2 WebR\nWebAssembly is a recent effort to develop tools for running complex programs in a web browser. WebR is a version of R that’s designed to use WebAssembly to run R code. You can find information on WebR on this page. The authors of WebR have created a bare-bones WebR editor that mimics RStudio’s layout and lets you write and run R code in your browser (https://webr.r-wasm.org/latest/).\nWhile this WebR editor may seem similar to Posit Cloud, in that you’re accessing an R programming environment through your web browser, the big difference lies in where the R code is actually running. In Posit Cloud, all of the computations are happening on an RStudio server located somewhere else (probably an AWS warehouse). The Posit Cloud website acts as a portal that lets you communicate with this server, as if you’re running RStudio on your computer. WebR actually is running on your computer, inside your web browser. This means all of the computations are happening on your local computer and not on a cloud server.\nThis also means that the WebR environment is not persistent. With Posit Cloud, any changes you make to the R environment are saved to the cloud server, so you see these changes the next time you open Posit Cloud. Since the R environment for WebR is running inside your web browser, it ends when you close your web browser (or the tab that’s running WebR). This means you’ll need to re-install the R packages you want to use every time you load WebR.\nWhile WebR does provide an alternative to running RStudio on your computer or through Posit Cloud, it should be your last resort for running the R code in these lessons. WebR is relatively new and still under active development, which means things could break/change without much warning. Also, while the WebR editor visually resembles RStudio, it’s really a demo of what WebR can do and lacks RStudio’s helpful features. All that being said, it’s still worth knowing about WebR. It’s just plain cool and opens up a lot of possibilities for how we can share data analyses and visualizations with each other."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#base-r",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#base-r",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.1 Base R",
    "text": "3.1 Base R\nThe functions and code included with every R installation are part of R’s base packages, also know as base R. The base packages include quite a bit of functionality on their own, providing us with functions for reading/writing files, mathematical calculations, graphing/plotting, as well as the framework upon which all other packages are built.\nWhile base R has its advantages, it can be a bit esoteric, particularly when you’re first starting out. We want to use packages to make our lives easier and our code more readable.\nThe R Foundation maintains a central repository and archive of R packages, known as CRAN (Comprehensive R Archive Network). Below, we’ll the install.packages() function to download and install some useful R packages from CRAN."
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#the-tidyverse",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.2 The tidyverse",
    "text": "3.2 The tidyverse\nThe tidyverse is a family of packages that will make it easier for us to read data from files, plot graphs, and generally wrangle data into useful formats. The bulk of these lessons (at least the early ones) are built around using various tidyverse packages to work with data.\nSince the tidyverse is not included with base R, we need to install it before we can use it. Run the following code to download and install the tidyverse packages:\n\ninstall.packages(\"tidyverse\")\n\nEven though we’ve downloaded and installed the tidyverse packages, we still can’t use any of their functions. Whenever we start a new R/RStudio session, it only loads the base R packages. This means R always starts quickly, no matter how many packages we’ve installed. It also means we have complete control over which packages are loaded into memory at any given time. Generally, we only want to load packages we know we’re going to use in the current R session. This keeps R’s memory footprint as small as possible, leaving more room for our data.\nWe load installed packages with the library() function. Note, when we load packages we don’t need to enclose the package names in quotation marks, like we did when running the install.packages() function.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "href": "LESSONS/Lesson-00_R-and-Rstudio-setup.html#palmer-penguins",
    "title": "Lesson 0: R & Rstudio Setup",
    "section": "3.3 Palmer Penguins",
    "text": "3.3 Palmer Penguins\n\n\n\nArtwork by @allison_horst\n\n\nNow that we’ve installed some tools to help us visualize and wrangle some data, we need a dataset to work with. For these lessons, we’ll start with the Palmer Penguins dataset.\nThe Palmer Penguins dataset contains anatomical and physiological measurements collected from three penguin species living on several islands near the Palmer Research Station in Antarctica. These data were collected by Dr. Kristin B. Gorman and the Palmer Station Long Term Ecological Research (LTER) program. This work was originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081.\n\nDr. Allison Horst, Dr. Alison Hill, and Dr. Kristen Gorman wrapped these data into the palmerpenguins R package.\n\n\n\nArtwork by @allison_horst\n\n\nHere, we’ll use the install.packages() function to install the \"palmerpenguins\" package. Construct this command and run it:\nNow that we’ve downloaded and installed the palmerpenguins package, use the library() function to load it.\nNow that we’ve installed R, RStudio, and the tidyverse and palmerpenguins R packages, our computers are ready for the introductory R lessons."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "",
    "text": "When we start R, we only have access to the base R packages. In order to use any additional packages, we need to load them into memory with the library() function.\nFor this lesson we’ll need two packages: ggplot2 and palmerpenguins. Run the following code chunk to load these two packages. Note, the second library command is empty. Modify the command so it loads the palmerpenguins package.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nIt’s good practice to start R code, stored in R scripts or quarto/Rmarkdown documents, by loading the packages we’ll be using in the body of the code. It gives readers, including future versions of ourselves, a consistent place to check all of the packages required to run our code."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#look-at-the-palmer-penguins-data-table",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#look-at-the-palmer-penguins-data-table",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "4.1 Look at the Palmer Penguins data table",
    "text": "4.1 Look at the Palmer Penguins data table\nAfter loading the palmerpenguins package, we now have access to table of penguin data. We can view the first 10 lines of this table directly in the R console:\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nEach row in this table contains data from a single penguin measurement during the study period. Looking at the columns, we see all of the different information the researchers recorded about each penguin. We can also see that there are observations with missing information, represented by NA values. In R terminology, this is called a data frame. It is a natural way of representing rectangular, spreadsheet-style data. The penguin data are technically stored as a tibble, which is a special type of data frame used by the tidyverse.\nThe palmerpenguins package also contains documentation for the penguin data frame. Look up “penguins” using the Help pane, or one of the other help functions. The documentation describes the contents of each column in the data frame.\nIn addition to viewing the data frame in the R console, we can use the View() function to quickly examine its contents in a scrollable, spreadsheet-style window.\n\nView(penguins)\n\nInside the view window, we can search the data frame for specific values, or re-order it by values in each of the columns. While the View() function is useful for smaller datasets, it is not generally suitable for data frames with more than a few thousand rows.\n\n\n\n\n\n\nThe “V” in the View() function is capitalized\n\n\n\nIf we try to use the View() function with a lower case “v”, we’ll generally get an error:\n\nview(penguins)\n\nError in view(penguins): could not find function \"view\"\n\n\n\n\nLastly, we can use the summary() function to get summary statistics about the data in each column of our data frame.\n\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\n\nThese functions help us building intuition about new datasets and spot potential problems for downstream analyses."
  },
  {
    "objectID": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#visualize-w-ggplot2",
    "href": "LESSONS/Lesson-01_Visualizing-data-with-ggplot2.html#visualize-w-ggplot2",
    "title": "Lesson 1: Visualizing data with ggplot2",
    "section": "4.2 Visualize the penguin data with ggplot2",
    "text": "4.2 Visualize the penguin data with ggplot2\nThe penguins data frame contains measurements of each penguin’s body mass and flipper length. Here we will use the ggplot2 package to visualize these data and examine the relationship between these two anatomical measurements.\nBelow we’ll review the code we need to create this graph: \n\n4.2.1 How to create a basic scatterplot\nWe start with the ggplot() function, which creates our ggplot and specifies the data we want to use. Think of this like setting up a blank canvas before we start painting. Note, we’re giving the ggplot() function access to the penguin data frame with the data argument.\n\nggplot(data = penguins)\n\n\n\n\nNext, we use the mapping argument to tell the ggplot() function how we want it to use the penguin data. In ggplot2, we always use the aes() function to define how to map the variables (columns) in our data to the visual properties (aesthetics) of the shapes we want to paint. In this example we want to plot body mass with the x-axis and flipper length with the y-axis.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm))\n\n\n\n\nNote how mapping the x/y aesthetics has affected the graph. The axes are now labeled and the ggplot() function has automatically set their ranges based on the range of body masses and flipper lengths in the penguin data frame.\nNow that we’ve prepared our canvas, we can start adding layers of paint. We paint shapes in ggplot2 using geom functions. Since we want to create a scatterplot, we’ll use the geom_point() function to add a layer of points to our plot. There is a whole family of different geom_ functions that we can use to plot different types of graphs (e.g. scatter plots, line graphs, bar graphs).\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNote that we combine the geom_point() function with the ggplot() function using the + sign. We can treat this like we’re “adding” a layer of points on top of the canvas we created with ggplot().\nAlso, take note of the warning we get from the ggplot2 code. Recall that we saw some columns with NA values when we were looking at the contents of the penguins data frame. The warning is telling us that two of the entries in the penguins data frame have NA values in either the body_mass_g or flipper_length_mm columns. The geom_point() function has no way of placing a point with a missing x- or y-coordinate, so ggplot2 automatically excludes rows with missing values before plotting. This filter only applies to columns (variables) in our data frame that we’re mapping to aesthetics. ggplot2 will still use rows in the penguins data frame that have NA values in the bill_length_mm and sex columns, since we’re not currently using those to plot anything.\nSo the general procedure we follow for plotting data with ggplot2 is to prepare our canvas with the ggplot() function, use the aes() function to tell ggplot2 how we want to use our data to paint the canvas, and apply paint to our canvas with a geom_ function (geom_point in the example above).\n\n\n4.2.2 Decorating our plots with more data\nNow that we have a basic scatterplot in hand, we can try to gain deeper insights into our data by incorporating more information into our plot. Our current scatterplot shows a positive relationship between flipper length and body mass. We know the penguin data frame contains measurements from three different penguin species. Let’s map species to the color aesthetic to see how this trend looks across all three species.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm,\n                     color = species)) +\n    geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNot only did ggplot2 automatically assign a different color to each penguin species, it also added a legend to the graph. That means this same block of code can work for a penguin data frame that contains data from one, two, or ten species of penguin.\nTo get a clearer picture of the trend between flipper length and body mass, we’re no going to add a regression line to the plot. We’ll do this with the geom_smooth() function. We’ll use the method = \"lm\" argument to specify we want to plot the line we get from fitting our data with a linear model.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm,\n                     color = species)) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nIt looks like geom_smooth() fit separate linear models for each penguin species and plotted the lines using the same colors as the points. While this is a useful feature (we’ll make use of this below), we want to fit all of the data with a single linear model. When we define aesthetic mappings in the ggplot() function, they apply to all geom_ functions in that plot. By mapping species to color, we told geom_smooth() we want it to color the smoothed line by species, which means it needs to fit a separate line for each species. To solve this problem we can specify an aesthetic mapping within a specific geom_ function. Let’s try moving the species to color mapping to geom_point() and geom_smooth(). Which option still colors the points by species, but fits all of the data with a single linear model?\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point() +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNow that we’ve sorted out the trend line, let’s return to how we’re plotting the points. The colors improve the readability of this graph, but could pose a problem if this figure is rendered in black and white, or if a reader has certain types of colorblindness. One solution is to map the points from different penguin species to different shapes. Try adding an aesthetic mapping of shape to species.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species)) +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nNote that the legend automatically updates to reflect the new shape mapping.\nThe are many more aesthetics beyond shape and color. The documentation for geom_ functions contains a special section listing the aesthetic mappings supported by that geom. Look up the help page for “geom_point” and find the list of supported aesthetics.\nWe’re almost done recreating the figure we saw at the beginning of this section. The axis labels our version of the figure are not as clean, and we’re still missing the plot title and subtitle. Collectively, these attributes are known as the graph’s “labels”, and we can modify them using the labs() function.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species, shape = species)) +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Relationship between flipper length and body mass\",\n         subtitle = \"Across three species of penguins studied at the Palmer Research Station\",\n         x = \"Body mass (g)\",\n         y = \"Flipper length (mm)\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nLastly, we’ll change the color scheme to a different palette from the default. The ggplot2 package includes a few additional color palettes we can apply to our plot using scale_color_ functions. For now, we’ll select a palette from the ColorBrewer collection that is good for representing qualitative data and is more colorblind safe than the default palette.\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point(mapping = aes(color = species, shape = species)) +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Relationship between flipper length and body mass\",\n         subtitle = \"Across three species of penguins studied at the Palmer Research Station\",\n         x = \"Body mass (g)\",\n         y = \"Flipper length (mm)\") +\n    scale_color_brewer(palette = \"Dark2\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nFor now, we’re not going to worry about the specifics of the ColorBrewer collection of palettes (though feel free to examine the documentation for the scale_color_brewer() function). But we can see that we can further adjust how ggplot2 displays our data using the scale_ family of functions.\nWith that last tweak, we’ve successfully recreated the figure we saw above.\n\n\n4.2.3 Creating our own scatterplot\n\n\n\nArtwork by @allison_horst\n\n\nNow we’re going to put everything we just learned into practice. Using the penguins data and the ggplot2 functions, we’re going to create a scatterplot of bill depth vs bill length. We can view the contents of penguins data frame directly, or consult the documentation to find the names of the columns that contain this information. Again, we’ll add a regression line that we fit using all of the data.\nLooking at the graph we created, what does it suggest about a relationship between bill depth and bill length? How might species affect this? How does the graph change if we fit separate regression lines within each species?\nThe difference between these two graphs is an example of Simspon’s paradox. Briefly, this is a phenomenon where a trend between two variables at the population level disappears, emerges, or reverses when we divide the population into groups. We were able to observe these changes by experimenting with the way we visualized the penguin data.\nWe’re only just scratching the surface of what we can do with ggplot2, but we’ve used it to rapidly visualize the penguin data and generate some interesting observations. In the next lesson, we will explore some of these observations further by working directly with the data to calculate summary statistics."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html",
    "title": "Lesson 2: Working with tabular data",
    "section": "",
    "text": "For this lesson we’ll need four packages:\n\npalmerpenguins\nhere\nreadr\ndplyr\n\nFirst, we need to install the here package, using the install.packages() function.\n\ninstall.packages(\"here\")\n\nNote, the readr and dplyr packages are part of the tidyverse, so we don’t need to install them separately. Now we use the library() function to load all of these packages.\n\nlibrary(here)\n\nhere() starts at C:/Users/nickopotamus/Projects/ITMAT_office_houRs\n\nlibrary(palmerpenguins)\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThe output from this code indicates R successfully loaded these packages. The message we get from the here package tells us which directory on our computers it’s using as the “root” directory (more on what this means below). The other warning messages explains that dplyr includes several functions (e.g. filter() and lag()) that have the same names as functions from the stats and base packages. R’s default behavior for resolving these naming conflicts is to use the version of the function loaded most recently into memory. The warning lets us know that if we run any of these functions, R will use the version of these functions from the dplyr package and not the stats/base package.\nThe potential for naming conflicts like this is another reason why we only load the packages we need for the current analyses.\n\n\n\n\n\n\nRStudio’s Tab-Complete List Includes Package Names for Each Function\n\n\n\nWhen we start to type a function’s name, and RStudio’s tab-completion prompt opens up, the package for each function is listed in curly bracers to the right of the function’s name. As we’re writing code, we can use this make sure we’re using the correct version of the function."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#base-r",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#base-r",
    "title": "Lesson 2: Working with tabular data",
    "section": "2.1 Base R",
    "text": "2.1 Base R\nWe can read the data from this file using the base R function read.csv() and store the data in a variable named penguin_data_from_base_r.\n\npenguin_data_from_base_r &lt;- read.csv(file = here::here(\"DATA/penguins.csv\"))\n\nIn R, &lt;- is called the assignment operator. The assignment operator takes the output from the function to its right (read.csv()) and assigns it to the variable to its right (penguin_data_from_base_r). Put differently, we’re storing the contents of the ‘penguins.csv’ file in ‘penguin_data_from_base_r’.\n\n\n\n\n\n\nThe here package\n\n\n\nThe here() function is helping to point R to the specific location of the file. It allows us to define a file’s location relative to the project’s main directory (ITMAT_office_houRs, in this case). While the here() function is not required to read files, it can make our lives easier when we’re using RStudio’s ‘Projects’ to manage our work.\n\n\nWe can look at the contents of penguin_data_from_base_r by entering the variable name into the R console.\n\npenguin_data_from_base_r\n\n      species    island bill_length_mm bill_depth_mm flipper_length_mm\n1      Adelie Torgersen           39.1          18.7               181\n2      Adelie Torgersen           39.5          17.4               186\n3      Adelie Torgersen           40.3          18.0               195\n4      Adelie Torgersen             NA            NA                NA\n5      Adelie Torgersen           36.7          19.3               193\n6      Adelie Torgersen           39.3          20.6               190\n7      Adelie Torgersen           38.9          17.8               181\n8      Adelie Torgersen           39.2          19.6               195\n9      Adelie Torgersen           34.1          18.1               193\n10     Adelie Torgersen           42.0          20.2               190\n11     Adelie Torgersen           37.8          17.1               186\n12     Adelie Torgersen           37.8          17.3               180\n13     Adelie Torgersen           41.1          17.6               182\n14     Adelie Torgersen           38.6          21.2               191\n15     Adelie Torgersen           34.6          21.1               198\n16     Adelie Torgersen           36.6          17.8               185\n17     Adelie Torgersen           38.7          19.0               195\n18     Adelie Torgersen           42.5          20.7               197\n19     Adelie Torgersen           34.4          18.4               184\n20     Adelie Torgersen           46.0          21.5               194\n21     Adelie    Biscoe           37.8          18.3               174\n22     Adelie    Biscoe           37.7          18.7               180\n23     Adelie    Biscoe           35.9          19.2               189\n24     Adelie    Biscoe           38.2          18.1               185\n25     Adelie    Biscoe           38.8          17.2               180\n26     Adelie    Biscoe           35.3          18.9               187\n27     Adelie    Biscoe           40.6          18.6               183\n28     Adelie    Biscoe           40.5          17.9               187\n29     Adelie    Biscoe           37.9          18.6               172\n30     Adelie    Biscoe           40.5          18.9               180\n31     Adelie     Dream           39.5          16.7               178\n32     Adelie     Dream           37.2          18.1               178\n33     Adelie     Dream           39.5          17.8               188\n34     Adelie     Dream           40.9          18.9               184\n35     Adelie     Dream           36.4          17.0               195\n36     Adelie     Dream           39.2          21.1               196\n37     Adelie     Dream           38.8          20.0               190\n38     Adelie     Dream           42.2          18.5               180\n39     Adelie     Dream           37.6          19.3               181\n40     Adelie     Dream           39.8          19.1               184\n41     Adelie     Dream           36.5          18.0               182\n42     Adelie     Dream           40.8          18.4               195\n43     Adelie     Dream           36.0          18.5               186\n44     Adelie     Dream           44.1          19.7               196\n45     Adelie     Dream           37.0          16.9               185\n46     Adelie     Dream           39.6          18.8               190\n47     Adelie     Dream           41.1          19.0               182\n48     Adelie     Dream           37.5          18.9               179\n49     Adelie     Dream           36.0          17.9               190\n50     Adelie     Dream           42.3          21.2               191\n51     Adelie    Biscoe           39.6          17.7               186\n52     Adelie    Biscoe           40.1          18.9               188\n53     Adelie    Biscoe           35.0          17.9               190\n54     Adelie    Biscoe           42.0          19.5               200\n55     Adelie    Biscoe           34.5          18.1               187\n56     Adelie    Biscoe           41.4          18.6               191\n57     Adelie    Biscoe           39.0          17.5               186\n58     Adelie    Biscoe           40.6          18.8               193\n59     Adelie    Biscoe           36.5          16.6               181\n60     Adelie    Biscoe           37.6          19.1               194\n61     Adelie    Biscoe           35.7          16.9               185\n62     Adelie    Biscoe           41.3          21.1               195\n63     Adelie    Biscoe           37.6          17.0               185\n64     Adelie    Biscoe           41.1          18.2               192\n65     Adelie    Biscoe           36.4          17.1               184\n66     Adelie    Biscoe           41.6          18.0               192\n67     Adelie    Biscoe           35.5          16.2               195\n68     Adelie    Biscoe           41.1          19.1               188\n69     Adelie Torgersen           35.9          16.6               190\n70     Adelie Torgersen           41.8          19.4               198\n71     Adelie Torgersen           33.5          19.0               190\n72     Adelie Torgersen           39.7          18.4               190\n73     Adelie Torgersen           39.6          17.2               196\n74     Adelie Torgersen           45.8          18.9               197\n75     Adelie Torgersen           35.5          17.5               190\n76     Adelie Torgersen           42.8          18.5               195\n77     Adelie Torgersen           40.9          16.8               191\n78     Adelie Torgersen           37.2          19.4               184\n79     Adelie Torgersen           36.2          16.1               187\n80     Adelie Torgersen           42.1          19.1               195\n81     Adelie Torgersen           34.6          17.2               189\n82     Adelie Torgersen           42.9          17.6               196\n83     Adelie Torgersen           36.7          18.8               187\n84     Adelie Torgersen           35.1          19.4               193\n85     Adelie     Dream           37.3          17.8               191\n86     Adelie     Dream           41.3          20.3               194\n87     Adelie     Dream           36.3          19.5               190\n88     Adelie     Dream           36.9          18.6               189\n89     Adelie     Dream           38.3          19.2               189\n90     Adelie     Dream           38.9          18.8               190\n91     Adelie     Dream           35.7          18.0               202\n92     Adelie     Dream           41.1          18.1               205\n93     Adelie     Dream           34.0          17.1               185\n94     Adelie     Dream           39.6          18.1               186\n95     Adelie     Dream           36.2          17.3               187\n96     Adelie     Dream           40.8          18.9               208\n97     Adelie     Dream           38.1          18.6               190\n98     Adelie     Dream           40.3          18.5               196\n99     Adelie     Dream           33.1          16.1               178\n100    Adelie     Dream           43.2          18.5               192\n101    Adelie    Biscoe           35.0          17.9               192\n102    Adelie    Biscoe           41.0          20.0               203\n103    Adelie    Biscoe           37.7          16.0               183\n104    Adelie    Biscoe           37.8          20.0               190\n105    Adelie    Biscoe           37.9          18.6               193\n106    Adelie    Biscoe           39.7          18.9               184\n107    Adelie    Biscoe           38.6          17.2               199\n108    Adelie    Biscoe           38.2          20.0               190\n109    Adelie    Biscoe           38.1          17.0               181\n110    Adelie    Biscoe           43.2          19.0               197\n111    Adelie    Biscoe           38.1          16.5               198\n112    Adelie    Biscoe           45.6          20.3               191\n113    Adelie    Biscoe           39.7          17.7               193\n114    Adelie    Biscoe           42.2          19.5               197\n115    Adelie    Biscoe           39.6          20.7               191\n116    Adelie    Biscoe           42.7          18.3               196\n117    Adelie Torgersen           38.6          17.0               188\n118    Adelie Torgersen           37.3          20.5               199\n119    Adelie Torgersen           35.7          17.0               189\n120    Adelie Torgersen           41.1          18.6               189\n121    Adelie Torgersen           36.2          17.2               187\n122    Adelie Torgersen           37.7          19.8               198\n123    Adelie Torgersen           40.2          17.0               176\n124    Adelie Torgersen           41.4          18.5               202\n125    Adelie Torgersen           35.2          15.9               186\n126    Adelie Torgersen           40.6          19.0               199\n127    Adelie Torgersen           38.8          17.6               191\n128    Adelie Torgersen           41.5          18.3               195\n129    Adelie Torgersen           39.0          17.1               191\n130    Adelie Torgersen           44.1          18.0               210\n131    Adelie Torgersen           38.5          17.9               190\n132    Adelie Torgersen           43.1          19.2               197\n133    Adelie     Dream           36.8          18.5               193\n134    Adelie     Dream           37.5          18.5               199\n135    Adelie     Dream           38.1          17.6               187\n136    Adelie     Dream           41.1          17.5               190\n137    Adelie     Dream           35.6          17.5               191\n138    Adelie     Dream           40.2          20.1               200\n139    Adelie     Dream           37.0          16.5               185\n140    Adelie     Dream           39.7          17.9               193\n141    Adelie     Dream           40.2          17.1               193\n142    Adelie     Dream           40.6          17.2               187\n143    Adelie     Dream           32.1          15.5               188\n144    Adelie     Dream           40.7          17.0               190\n145    Adelie     Dream           37.3          16.8               192\n146    Adelie     Dream           39.0          18.7               185\n147    Adelie     Dream           39.2          18.6               190\n148    Adelie     Dream           36.6          18.4               184\n149    Adelie     Dream           36.0          17.8               195\n150    Adelie     Dream           37.8          18.1               193\n151    Adelie     Dream           36.0          17.1               187\n152    Adelie     Dream           41.5          18.5               201\n153    Gentoo    Biscoe           46.1          13.2               211\n154    Gentoo    Biscoe           50.0          16.3               230\n155    Gentoo    Biscoe           48.7          14.1               210\n156    Gentoo    Biscoe           50.0          15.2               218\n157    Gentoo    Biscoe           47.6          14.5               215\n158    Gentoo    Biscoe           46.5          13.5               210\n159    Gentoo    Biscoe           45.4          14.6               211\n160    Gentoo    Biscoe           46.7          15.3               219\n161    Gentoo    Biscoe           43.3          13.4               209\n162    Gentoo    Biscoe           46.8          15.4               215\n163    Gentoo    Biscoe           40.9          13.7               214\n164    Gentoo    Biscoe           49.0          16.1               216\n165    Gentoo    Biscoe           45.5          13.7               214\n166    Gentoo    Biscoe           48.4          14.6               213\n167    Gentoo    Biscoe           45.8          14.6               210\n168    Gentoo    Biscoe           49.3          15.7               217\n169    Gentoo    Biscoe           42.0          13.5               210\n170    Gentoo    Biscoe           49.2          15.2               221\n171    Gentoo    Biscoe           46.2          14.5               209\n172    Gentoo    Biscoe           48.7          15.1               222\n173    Gentoo    Biscoe           50.2          14.3               218\n174    Gentoo    Biscoe           45.1          14.5               215\n175    Gentoo    Biscoe           46.5          14.5               213\n176    Gentoo    Biscoe           46.3          15.8               215\n177    Gentoo    Biscoe           42.9          13.1               215\n178    Gentoo    Biscoe           46.1          15.1               215\n179    Gentoo    Biscoe           44.5          14.3               216\n180    Gentoo    Biscoe           47.8          15.0               215\n181    Gentoo    Biscoe           48.2          14.3               210\n182    Gentoo    Biscoe           50.0          15.3               220\n183    Gentoo    Biscoe           47.3          15.3               222\n184    Gentoo    Biscoe           42.8          14.2               209\n185    Gentoo    Biscoe           45.1          14.5               207\n186    Gentoo    Biscoe           59.6          17.0               230\n187    Gentoo    Biscoe           49.1          14.8               220\n188    Gentoo    Biscoe           48.4          16.3               220\n189    Gentoo    Biscoe           42.6          13.7               213\n190    Gentoo    Biscoe           44.4          17.3               219\n191    Gentoo    Biscoe           44.0          13.6               208\n192    Gentoo    Biscoe           48.7          15.7               208\n193    Gentoo    Biscoe           42.7          13.7               208\n194    Gentoo    Biscoe           49.6          16.0               225\n195    Gentoo    Biscoe           45.3          13.7               210\n196    Gentoo    Biscoe           49.6          15.0               216\n197    Gentoo    Biscoe           50.5          15.9               222\n198    Gentoo    Biscoe           43.6          13.9               217\n199    Gentoo    Biscoe           45.5          13.9               210\n200    Gentoo    Biscoe           50.5          15.9               225\n201    Gentoo    Biscoe           44.9          13.3               213\n202    Gentoo    Biscoe           45.2          15.8               215\n203    Gentoo    Biscoe           46.6          14.2               210\n204    Gentoo    Biscoe           48.5          14.1               220\n205    Gentoo    Biscoe           45.1          14.4               210\n206    Gentoo    Biscoe           50.1          15.0               225\n207    Gentoo    Biscoe           46.5          14.4               217\n208    Gentoo    Biscoe           45.0          15.4               220\n209    Gentoo    Biscoe           43.8          13.9               208\n210    Gentoo    Biscoe           45.5          15.0               220\n211    Gentoo    Biscoe           43.2          14.5               208\n212    Gentoo    Biscoe           50.4          15.3               224\n213    Gentoo    Biscoe           45.3          13.8               208\n214    Gentoo    Biscoe           46.2          14.9               221\n215    Gentoo    Biscoe           45.7          13.9               214\n216    Gentoo    Biscoe           54.3          15.7               231\n217    Gentoo    Biscoe           45.8          14.2               219\n218    Gentoo    Biscoe           49.8          16.8               230\n219    Gentoo    Biscoe           46.2          14.4               214\n220    Gentoo    Biscoe           49.5          16.2               229\n221    Gentoo    Biscoe           43.5          14.2               220\n222    Gentoo    Biscoe           50.7          15.0               223\n223    Gentoo    Biscoe           47.7          15.0               216\n224    Gentoo    Biscoe           46.4          15.6               221\n225    Gentoo    Biscoe           48.2          15.6               221\n226    Gentoo    Biscoe           46.5          14.8               217\n227    Gentoo    Biscoe           46.4          15.0               216\n228    Gentoo    Biscoe           48.6          16.0               230\n229    Gentoo    Biscoe           47.5          14.2               209\n230    Gentoo    Biscoe           51.1          16.3               220\n231    Gentoo    Biscoe           45.2          13.8               215\n232    Gentoo    Biscoe           45.2          16.4               223\n233    Gentoo    Biscoe           49.1          14.5               212\n234    Gentoo    Biscoe           52.5          15.6               221\n235    Gentoo    Biscoe           47.4          14.6               212\n236    Gentoo    Biscoe           50.0          15.9               224\n237    Gentoo    Biscoe           44.9          13.8               212\n238    Gentoo    Biscoe           50.8          17.3               228\n239    Gentoo    Biscoe           43.4          14.4               218\n240    Gentoo    Biscoe           51.3          14.2               218\n241    Gentoo    Biscoe           47.5          14.0               212\n242    Gentoo    Biscoe           52.1          17.0               230\n243    Gentoo    Biscoe           47.5          15.0               218\n244    Gentoo    Biscoe           52.2          17.1               228\n245    Gentoo    Biscoe           45.5          14.5               212\n246    Gentoo    Biscoe           49.5          16.1               224\n247    Gentoo    Biscoe           44.5          14.7               214\n248    Gentoo    Biscoe           50.8          15.7               226\n249    Gentoo    Biscoe           49.4          15.8               216\n250    Gentoo    Biscoe           46.9          14.6               222\n251    Gentoo    Biscoe           48.4          14.4               203\n252    Gentoo    Biscoe           51.1          16.5               225\n253    Gentoo    Biscoe           48.5          15.0               219\n254    Gentoo    Biscoe           55.9          17.0               228\n255    Gentoo    Biscoe           47.2          15.5               215\n256    Gentoo    Biscoe           49.1          15.0               228\n257    Gentoo    Biscoe           47.3          13.8               216\n258    Gentoo    Biscoe           46.8          16.1               215\n259    Gentoo    Biscoe           41.7          14.7               210\n260    Gentoo    Biscoe           53.4          15.8               219\n261    Gentoo    Biscoe           43.3          14.0               208\n262    Gentoo    Biscoe           48.1          15.1               209\n263    Gentoo    Biscoe           50.5          15.2               216\n264    Gentoo    Biscoe           49.8          15.9               229\n265    Gentoo    Biscoe           43.5          15.2               213\n266    Gentoo    Biscoe           51.5          16.3               230\n267    Gentoo    Biscoe           46.2          14.1               217\n268    Gentoo    Biscoe           55.1          16.0               230\n269    Gentoo    Biscoe           44.5          15.7               217\n270    Gentoo    Biscoe           48.8          16.2               222\n271    Gentoo    Biscoe           47.2          13.7               214\n272    Gentoo    Biscoe             NA            NA                NA\n273    Gentoo    Biscoe           46.8          14.3               215\n274    Gentoo    Biscoe           50.4          15.7               222\n275    Gentoo    Biscoe           45.2          14.8               212\n276    Gentoo    Biscoe           49.9          16.1               213\n277 Chinstrap     Dream           46.5          17.9               192\n278 Chinstrap     Dream           50.0          19.5               196\n279 Chinstrap     Dream           51.3          19.2               193\n280 Chinstrap     Dream           45.4          18.7               188\n281 Chinstrap     Dream           52.7          19.8               197\n282 Chinstrap     Dream           45.2          17.8               198\n283 Chinstrap     Dream           46.1          18.2               178\n284 Chinstrap     Dream           51.3          18.2               197\n285 Chinstrap     Dream           46.0          18.9               195\n286 Chinstrap     Dream           51.3          19.9               198\n287 Chinstrap     Dream           46.6          17.8               193\n288 Chinstrap     Dream           51.7          20.3               194\n289 Chinstrap     Dream           47.0          17.3               185\n290 Chinstrap     Dream           52.0          18.1               201\n291 Chinstrap     Dream           45.9          17.1               190\n292 Chinstrap     Dream           50.5          19.6               201\n293 Chinstrap     Dream           50.3          20.0               197\n294 Chinstrap     Dream           58.0          17.8               181\n295 Chinstrap     Dream           46.4          18.6               190\n296 Chinstrap     Dream           49.2          18.2               195\n297 Chinstrap     Dream           42.4          17.3               181\n298 Chinstrap     Dream           48.5          17.5               191\n299 Chinstrap     Dream           43.2          16.6               187\n300 Chinstrap     Dream           50.6          19.4               193\n301 Chinstrap     Dream           46.7          17.9               195\n302 Chinstrap     Dream           52.0          19.0               197\n303 Chinstrap     Dream           50.5          18.4               200\n304 Chinstrap     Dream           49.5          19.0               200\n305 Chinstrap     Dream           46.4          17.8               191\n306 Chinstrap     Dream           52.8          20.0               205\n307 Chinstrap     Dream           40.9          16.6               187\n308 Chinstrap     Dream           54.2          20.8               201\n309 Chinstrap     Dream           42.5          16.7               187\n310 Chinstrap     Dream           51.0          18.8               203\n311 Chinstrap     Dream           49.7          18.6               195\n312 Chinstrap     Dream           47.5          16.8               199\n313 Chinstrap     Dream           47.6          18.3               195\n314 Chinstrap     Dream           52.0          20.7               210\n315 Chinstrap     Dream           46.9          16.6               192\n316 Chinstrap     Dream           53.5          19.9               205\n317 Chinstrap     Dream           49.0          19.5               210\n318 Chinstrap     Dream           46.2          17.5               187\n319 Chinstrap     Dream           50.9          19.1               196\n320 Chinstrap     Dream           45.5          17.0               196\n321 Chinstrap     Dream           50.9          17.9               196\n322 Chinstrap     Dream           50.8          18.5               201\n323 Chinstrap     Dream           50.1          17.9               190\n324 Chinstrap     Dream           49.0          19.6               212\n325 Chinstrap     Dream           51.5          18.7               187\n326 Chinstrap     Dream           49.8          17.3               198\n327 Chinstrap     Dream           48.1          16.4               199\n328 Chinstrap     Dream           51.4          19.0               201\n329 Chinstrap     Dream           45.7          17.3               193\n330 Chinstrap     Dream           50.7          19.7               203\n331 Chinstrap     Dream           42.5          17.3               187\n332 Chinstrap     Dream           52.2          18.8               197\n333 Chinstrap     Dream           45.2          16.6               191\n334 Chinstrap     Dream           49.3          19.9               203\n335 Chinstrap     Dream           50.2          18.8               202\n336 Chinstrap     Dream           45.6          19.4               194\n337 Chinstrap     Dream           51.9          19.5               206\n338 Chinstrap     Dream           46.8          16.5               189\n339 Chinstrap     Dream           45.7          17.0               195\n340 Chinstrap     Dream           55.8          19.8               207\n341 Chinstrap     Dream           43.5          18.1               202\n342 Chinstrap     Dream           49.6          18.2               193\n343 Chinstrap     Dream           50.8          19.0               210\n344 Chinstrap     Dream           50.2          18.7               198\n    body_mass_g    sex year\n1          3750   male 2007\n2          3800 female 2007\n3          3250 female 2007\n4            NA   &lt;NA&gt; 2007\n5          3450 female 2007\n6          3650   male 2007\n7          3625 female 2007\n8          4675   male 2007\n9          3475   &lt;NA&gt; 2007\n10         4250   &lt;NA&gt; 2007\n11         3300   &lt;NA&gt; 2007\n12         3700   &lt;NA&gt; 2007\n13         3200 female 2007\n14         3800   male 2007\n15         4400   male 2007\n16         3700 female 2007\n17         3450 female 2007\n18         4500   male 2007\n19         3325 female 2007\n20         4200   male 2007\n21         3400 female 2007\n22         3600   male 2007\n23         3800 female 2007\n24         3950   male 2007\n25         3800   male 2007\n26         3800 female 2007\n27         3550   male 2007\n28         3200 female 2007\n29         3150 female 2007\n30         3950   male 2007\n31         3250 female 2007\n32         3900   male 2007\n33         3300 female 2007\n34         3900   male 2007\n35         3325 female 2007\n36         4150   male 2007\n37         3950   male 2007\n38         3550 female 2007\n39         3300 female 2007\n40         4650   male 2007\n41         3150 female 2007\n42         3900   male 2007\n43         3100 female 2007\n44         4400   male 2007\n45         3000 female 2007\n46         4600   male 2007\n47         3425   male 2007\n48         2975   &lt;NA&gt; 2007\n49         3450 female 2007\n50         4150   male 2007\n51         3500 female 2008\n52         4300   male 2008\n53         3450 female 2008\n54         4050   male 2008\n55         2900 female 2008\n56         3700   male 2008\n57         3550 female 2008\n58         3800   male 2008\n59         2850 female 2008\n60         3750   male 2008\n61         3150 female 2008\n62         4400   male 2008\n63         3600 female 2008\n64         4050   male 2008\n65         2850 female 2008\n66         3950   male 2008\n67         3350 female 2008\n68         4100   male 2008\n69         3050 female 2008\n70         4450   male 2008\n71         3600 female 2008\n72         3900   male 2008\n73         3550 female 2008\n74         4150   male 2008\n75         3700 female 2008\n76         4250   male 2008\n77         3700 female 2008\n78         3900   male 2008\n79         3550 female 2008\n80         4000   male 2008\n81         3200 female 2008\n82         4700   male 2008\n83         3800 female 2008\n84         4200   male 2008\n85         3350 female 2008\n86         3550   male 2008\n87         3800   male 2008\n88         3500 female 2008\n89         3950   male 2008\n90         3600 female 2008\n91         3550 female 2008\n92         4300   male 2008\n93         3400 female 2008\n94         4450   male 2008\n95         3300 female 2008\n96         4300   male 2008\n97         3700 female 2008\n98         4350   male 2008\n99         2900 female 2008\n100        4100   male 2008\n101        3725 female 2009\n102        4725   male 2009\n103        3075 female 2009\n104        4250   male 2009\n105        2925 female 2009\n106        3550   male 2009\n107        3750 female 2009\n108        3900   male 2009\n109        3175 female 2009\n110        4775   male 2009\n111        3825 female 2009\n112        4600   male 2009\n113        3200 female 2009\n114        4275   male 2009\n115        3900 female 2009\n116        4075   male 2009\n117        2900 female 2009\n118        3775   male 2009\n119        3350 female 2009\n120        3325   male 2009\n121        3150 female 2009\n122        3500   male 2009\n123        3450 female 2009\n124        3875   male 2009\n125        3050 female 2009\n126        4000   male 2009\n127        3275 female 2009\n128        4300   male 2009\n129        3050 female 2009\n130        4000   male 2009\n131        3325 female 2009\n132        3500   male 2009\n133        3500 female 2009\n134        4475   male 2009\n135        3425 female 2009\n136        3900   male 2009\n137        3175 female 2009\n138        3975   male 2009\n139        3400 female 2009\n140        4250   male 2009\n141        3400 female 2009\n142        3475   male 2009\n143        3050 female 2009\n144        3725   male 2009\n145        3000 female 2009\n146        3650   male 2009\n147        4250   male 2009\n148        3475 female 2009\n149        3450 female 2009\n150        3750   male 2009\n151        3700 female 2009\n152        4000   male 2009\n153        4500 female 2007\n154        5700   male 2007\n155        4450 female 2007\n156        5700   male 2007\n157        5400   male 2007\n158        4550 female 2007\n159        4800 female 2007\n160        5200   male 2007\n161        4400 female 2007\n162        5150   male 2007\n163        4650 female 2007\n164        5550   male 2007\n165        4650 female 2007\n166        5850   male 2007\n167        4200 female 2007\n168        5850   male 2007\n169        4150 female 2007\n170        6300   male 2007\n171        4800 female 2007\n172        5350   male 2007\n173        5700   male 2007\n174        5000 female 2007\n175        4400 female 2007\n176        5050   male 2007\n177        5000 female 2007\n178        5100   male 2007\n179        4100   &lt;NA&gt; 2007\n180        5650   male 2007\n181        4600 female 2007\n182        5550   male 2007\n183        5250   male 2007\n184        4700 female 2007\n185        5050 female 2007\n186        6050   male 2007\n187        5150 female 2008\n188        5400   male 2008\n189        4950 female 2008\n190        5250   male 2008\n191        4350 female 2008\n192        5350   male 2008\n193        3950 female 2008\n194        5700   male 2008\n195        4300 female 2008\n196        4750   male 2008\n197        5550   male 2008\n198        4900 female 2008\n199        4200 female 2008\n200        5400   male 2008\n201        5100 female 2008\n202        5300   male 2008\n203        4850 female 2008\n204        5300   male 2008\n205        4400 female 2008\n206        5000   male 2008\n207        4900 female 2008\n208        5050   male 2008\n209        4300 female 2008\n210        5000   male 2008\n211        4450 female 2008\n212        5550   male 2008\n213        4200 female 2008\n214        5300   male 2008\n215        4400 female 2008\n216        5650   male 2008\n217        4700 female 2008\n218        5700   male 2008\n219        4650   &lt;NA&gt; 2008\n220        5800   male 2008\n221        4700 female 2008\n222        5550   male 2008\n223        4750 female 2008\n224        5000   male 2008\n225        5100   male 2008\n226        5200 female 2008\n227        4700 female 2008\n228        5800   male 2008\n229        4600 female 2008\n230        6000   male 2008\n231        4750 female 2008\n232        5950   male 2008\n233        4625 female 2009\n234        5450   male 2009\n235        4725 female 2009\n236        5350   male 2009\n237        4750 female 2009\n238        5600   male 2009\n239        4600 female 2009\n240        5300   male 2009\n241        4875 female 2009\n242        5550   male 2009\n243        4950 female 2009\n244        5400   male 2009\n245        4750 female 2009\n246        5650   male 2009\n247        4850 female 2009\n248        5200   male 2009\n249        4925   male 2009\n250        4875 female 2009\n251        4625 female 2009\n252        5250   male 2009\n253        4850 female 2009\n254        5600   male 2009\n255        4975 female 2009\n256        5500   male 2009\n257        4725   &lt;NA&gt; 2009\n258        5500   male 2009\n259        4700 female 2009\n260        5500   male 2009\n261        4575 female 2009\n262        5500   male 2009\n263        5000 female 2009\n264        5950   male 2009\n265        4650 female 2009\n266        5500   male 2009\n267        4375 female 2009\n268        5850   male 2009\n269        4875   &lt;NA&gt; 2009\n270        6000   male 2009\n271        4925 female 2009\n272          NA   &lt;NA&gt; 2009\n273        4850 female 2009\n274        5750   male 2009\n275        5200 female 2009\n276        5400   male 2009\n277        3500 female 2007\n278        3900   male 2007\n279        3650   male 2007\n280        3525 female 2007\n281        3725   male 2007\n282        3950 female 2007\n283        3250 female 2007\n284        3750   male 2007\n285        4150 female 2007\n286        3700   male 2007\n287        3800 female 2007\n288        3775   male 2007\n289        3700 female 2007\n290        4050   male 2007\n291        3575 female 2007\n292        4050   male 2007\n293        3300   male 2007\n294        3700 female 2007\n295        3450 female 2007\n296        4400   male 2007\n297        3600 female 2007\n298        3400   male 2007\n299        2900 female 2007\n300        3800   male 2007\n301        3300 female 2007\n302        4150   male 2007\n303        3400 female 2008\n304        3800   male 2008\n305        3700 female 2008\n306        4550   male 2008\n307        3200 female 2008\n308        4300   male 2008\n309        3350 female 2008\n310        4100   male 2008\n311        3600   male 2008\n312        3900 female 2008\n313        3850 female 2008\n314        4800   male 2008\n315        2700 female 2008\n316        4500   male 2008\n317        3950   male 2008\n318        3650 female 2008\n319        3550   male 2008\n320        3500 female 2008\n321        3675 female 2009\n322        4450   male 2009\n323        3400 female 2009\n324        4300   male 2009\n325        3250   male 2009\n326        3675 female 2009\n327        3325 female 2009\n328        3950   male 2009\n329        3600 female 2009\n330        4050   male 2009\n331        3350 female 2009\n332        3450   male 2009\n333        3250 female 2009\n334        4050   male 2009\n335        3800   male 2009\n336        3525 female 2009\n337        3950   male 2009\n338        3650 female 2009\n339        3650 female 2009\n340        4000   male 2009\n341        3400 female 2009\n342        3775   male 2009\n343        4100   male 2009\n344        3775 female 2009\n\n\nNotice, that “penguin_data_from_base_r” now appears in the Environment tab of the upper right pane of the RStudio window. We can use this tab to quickly check the data we’ve loaded into R.\nWhile the read.csv() function gets the job done, it doesn’t do a lot to format the data."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#the-readr-package",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#the-readr-package",
    "title": "Lesson 2: Working with tabular data",
    "section": "2.2 The readr package",
    "text": "2.2 The readr package\n\n\n\n\n\nAs the name implies, the readr package contains functions designed to help us read tabular data from text files. These functions a lot of useful features to mark and handle problems we’re likely to encounter in real-world data (we’ll see some examples of this in later lessons).\nTo read this csv file, we’re going to use the read_csv() function from the readr package. The command is almost identical to base R, except we have an underscore in read_csv(), instead of a period.\n\npenguin_data_from_readr &lt;- read_csv(file = here::here(\"DATA/penguins.csv\"))\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe readr function includes some additional output that tells us about guesses it’s making about data in the file. Specifically, it determined the species, island, and sex columns contain text (or “characters”), while the remaining columns contain numbers with decimal points (or “doubles”).\nCompare the the contents of the penguin_data_from_readr to the penguin_data_from_base_r data we loaded above:\n\npenguin_data_from_readr\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\nreadr functions read data from files and store them as tibbles, a special version of a data frame. We saw an example of a tibble when we worked with the penguins data frame, loaded by the palmerpenguins package."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#the-dplyr-package",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#the-dplyr-package",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.1 The dplyr Package",
    "text": "3.1 The dplyr Package\n\n\n\n\n\nThe dplyr package comes with many functions for manipulating and extracting information from tabular data. As we’ll see below, dplyr functions are named after verbs that describe what we’re doing to the input data, and the first argument of every function is the input data frame (or tibble).\nFor simplicity, we’ll return to using the penguins data frame for the remainder of this lesson. While we could use dplyr functions to work with the data we read from penguins.csv, the penguins data frame has some nicer formatting."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#filter",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#filter",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.2 Filter",
    "text": "3.2 Filter\nWe can use the filter() function to grab rows from our data that contain specific information. Here, we extract just those rows containing measurements from Gentoo penguins.\n\nfilter(penguins, species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nRemember, the species information in our data frame is contained in the “species” column. This example code is telling R to search through every row in the penguin data, and return those rows that have “Gentoo” in the species column. From this example, we can see the general form for using the filter function: filter(dataset, comparison). We used “==” to indicate we want to find all rows in species that match the word “Gentoo”. This is an example of a relational operator.\n\n\n\n\n\n\nCompare Values With Relational Operators\n\n\n\nR supports several operators that let us compare values:\n\n== : Check if two values are exactly equal. Many programming languages use the double equals sign to indicate comparisons, because they’re already using the single equal sign for something else (e.g. assignment).\n&lt;, &gt; : Less-than, and greater-than comparisons.\n&lt;=, &gt;= : Less-than or equal, and greater-than or equal comparisons.\n!= : Check if two values are not equal.\n\nThese operators return a logical value: TRUE or FALSE.\n\n\"Gentoo\" == \"Gentoo\"\n\n[1] TRUE\n\n121 &lt; 43\n\n[1] FALSE\n\n\n\n\nWe can also combine multiple filtering conditions in the same command. In this example, we want to get the rows containing data from female Adelie penguins.\n\nfilter(penguins,\n       sex == \"female\",\n       species == \"Adelie\")\n\n# A tibble: 73 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# ℹ 63 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nAlternatively, we can combine multiple conditions with the & symbol (meaning “and”) and the | symbol (meaning “or”). We can re-write the previous filter command using the & symbol:\n\nfilter(penguins,\n       sex == \"female\" & species == \"Adelie\")\n\n# A tibble: 73 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# ℹ 63 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWe can use the | symbol to retrieve data from female penguins that are either Adelie or Chinstrap:\n\nfilter(penguins,\n       sex == \"female\",\n       species == \"Adelie\" | species == \"Chinstrap\")\n\n# A tibble: 107 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# ℹ 97 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nLet’s use the filter function to create a new data frame that just contains rows from our penguin data from Gentoo penguins.\n\ngentoo_penguin_data &lt;- filter(penguins, )"
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#select",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#select",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.3 Select",
    "text": "3.3 Select\nWith the filter() function, we can choose which rows we want to extract from our data. If we want to choose which columns to extract, we use the select() function. Here we extract the columns containing the species, flipper length, and body mass from each penguin in the dataset.\n\nselect(penguins, species, flipper_length_mm, body_mass_g)\n\n# A tibble: 344 × 3\n   species flipper_length_mm body_mass_g\n   &lt;fct&gt;               &lt;int&gt;       &lt;int&gt;\n 1 Adelie                181        3750\n 2 Adelie                186        3800\n 3 Adelie                195        3250\n 4 Adelie                 NA          NA\n 5 Adelie                193        3450\n 6 Adelie                190        3650\n 7 Adelie                181        3625\n 8 Adelie                195        4675\n 9 Adelie                193        3475\n10 Adelie                190        4250\n# ℹ 334 more rows\n\n\nFrom this example code, we can see the general form of the select() function: select(dataset, column_name1, column_name2, ...). The select() function is very useful for reducing our dataset to just the columns we need for a particular calculation or analysis. This is critical when we’re working with input data that have 100s of columns.\nAbove, we created a data frame that only contains data from Gentoo penguins. Now let’s use the select() function on that data frame to extract the columns containing the species, flipper length, and body mass measurements. We’ll save the selected data frame in a new variable.\n\ngentoo_body_and_flipper &lt;- select(gentoo_penguin_data, species, )"
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#mutate",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#mutate",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.4 Mutate",
    "text": "3.4 Mutate\n\n\n\nArtwork by @allison_horst\n\n\nIf we want to add new columns to a data frame, We use the mutate() function. Here, we add a new column which contains the body mass of each penguins in kilograms (the “body_mass_g” column is in grams).\n\nmutate(penguins,\n       body_mass_kg = body_mass_g / 1000)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, body_mass_kg &lt;dbl&gt;\n\n\nFrom this code, we can see the general form of the mutate() function: mutate(dataset, new_column_name = expression). In this example, used the “/” operator to indicate we want to divide penguin body mass in grams by 1000, to calculate the body mass in kilograms. This is an example of an arithmetic operator.\n\n\n\n\n\n\nArithmetic Operators\n\n\n\nR supports several operators that allow us to perform various mathematical operations:\n\n+ addition\n- subtraction\n* multiplication\n/ division\n^ exponentiation\n\nWhen we use these operators on the column of a data frame, they’re designed to work separately on each value in the column (called an “element wise” operation).\n\n\nNote that mutate() adds new columns to the right side of the data frame. If we want to add new columns in different locations, we can use the .before and .after arguments.\n\nmutate(penguins,\n       body_mass_kg = body_mass_g / 1000,\n       .after = body_mass_g)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: body_mass_kg &lt;dbl&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\nWe can provide .after and .before with either a column name (like we did above), or a number referring to the position in the table we want to insert the new column. Here we insert the new column before the current second column:\n\nmutate(penguins,\n       body_mass_kg = body_mass_g / 1000,\n       .before = 2)\n\n# A tibble: 344 × 9\n   species body_mass_kg island    bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;fct&gt;          &lt;dbl&gt; &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1 Adelie          3.75 Torgersen           39.1          18.7               181\n 2 Adelie          3.8  Torgersen           39.5          17.4               186\n 3 Adelie          3.25 Torgersen           40.3          18                 195\n 4 Adelie         NA    Torgersen           NA            NA                  NA\n 5 Adelie          3.45 Torgersen           36.7          19.3               193\n 6 Adelie          3.65 Torgersen           39.3          20.6               190\n 7 Adelie          3.62 Torgersen           38.9          17.8               181\n 8 Adelie          4.68 Torgersen           39.2          19.6               195\n 9 Adelie          3.48 Torgersen           34.1          18.1               193\n10 Adelie          4.25 Torgersen           42            20.2               190\n# ℹ 334 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\nLet’s use the mutate() function to add a body mass (mg) column to the data frame of Gentoo data we’ve been working on so far. We’ll save this expanded data frame in a new variable.\n\ngentoo_body_kg_and_flipper &lt;- mutate(gentoo_body_and_flipper,)"
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#pipes-in-r",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#pipes-in-r",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.5 Pipes in R",
    "text": "3.5 Pipes in R\nR has a functionality allowing us to take the output of one function and provide it as input to another. The general name for this type of operation is “piping”. The pipe operator in R is |&gt;. Here we use the filter() function, the R pipe (|&gt;), and the head() function to view the first six rows returned by the filter function.\n\nfilter(penguins, species == \"Gentoo\") |&gt; head()\n\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo  Biscoe           46.1          13.2               211        4500\n2 Gentoo  Biscoe           50            16.3               230        5700\n3 Gentoo  Biscoe           48.7          14.1               210        4450\n4 Gentoo  Biscoe           50            15.2               218        5700\n5 Gentoo  Biscoe           47.6          14.5               215        5400\n6 Gentoo  Biscoe           46.5          13.5               210        4550\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nIn this R code, we use the filter() command to extract all of the rows from the data containing measurements from Gentoo penguins. We then use the |&gt; operator to send the output of the filter() function to the head() function. The head() function returns the first 6 rows from its input data frame.\n\n\n\n\n\n\nRStudio’s pipe shortcut\n\n\n\nWhen working in RStudio, we can use the shortcut Ctrl/Cmd + Shift + M to enter the pipe.\n\n\nOver the last three sections we used the filter(), select(), and mutate functions to create this data frame:\n\nhead(gentoo_body_kg_and_flipper)\n\n# A tibble: 6 × 1\n  species\n  &lt;fct&gt;  \n1 Adelie \n2 Adelie \n3 Adelie \n4 Adelie \n5 Adelie \n6 Adelie \n\n\nWe saved each of the intermediates to their own variables (take a look in the Environment tab to see the list of variables). Alternatively, we can use the pipe to generate the same data frame without saving any of the intermediate results:\n\npenguins |&gt; \n    filter(species == \"Gentoo\") |&gt; \n    select(species, flipper_length_mm, body_mass_g) |&gt; \n    mutate(body_mass_mg = body_mass_g * 1000,\n           .before = body_mass_g) |&gt; \n    head()\n\n# A tibble: 6 × 4\n  species flipper_length_mm body_mass_mg body_mass_g\n  &lt;fct&gt;               &lt;int&gt;        &lt;dbl&gt;       &lt;int&gt;\n1 Gentoo                211      4500000        4500\n2 Gentoo                230      5700000        5700\n3 Gentoo                210      4450000        4450\n4 Gentoo                218      5700000        5700\n5 Gentoo                215      5400000        5400\n6 Gentoo                210      4550000        4550\n\n\nWith the pipe operator, we can combine many simple R functions to create complex pipelines, all while keeping our code readable.\nUnder the hood, the |&gt; operator is taking the output of the function on its left and feeding it into the first argument of the function on its right. All dplyr functions are fully compatible with the pipe operator (the first argument of every function is the input data frame).\n\n\n\n\n\n\nAnother Pipe Operator: %&gt;%\n\n\n\nThe |&gt; pipe operator is a relatively recent (May 2021) addition to base R. Before that, we needed to use the %&gt;% operator, also called the “magrittr pipe.” This operator is still around and used in a lot of existing R code, but it requires us to load the magrittr package. In these lessons, we’ll only use the native |&gt; pipe operator, so we don’t need to load any extra packages."
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#arrange",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#arrange",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.6 Arrange",
    "text": "3.6 Arrange\nWe can use the arrange() function to sort the rows in our data according to the values in one or more columns. Here we sort the penguins by bill depth:\n\narrange(penguins, bill_depth_mm)\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           42.9          13.1               215        5000\n 2 Gentoo  Biscoe           46.1          13.2               211        4500\n 3 Gentoo  Biscoe           44.9          13.3               213        5100\n 4 Gentoo  Biscoe           43.3          13.4               209        4400\n 5 Gentoo  Biscoe           46.5          13.5               210        4550\n 6 Gentoo  Biscoe           42            13.5               210        4150\n 7 Gentoo  Biscoe           44            13.6               208        4350\n 8 Gentoo  Biscoe           40.9          13.7               214        4650\n 9 Gentoo  Biscoe           45.5          13.7               214        4650\n10 Gentoo  Biscoe           42.6          13.7               213        4950\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nBy default, arrange() sorts values from smallest to largest (ascending). We can use the desc() function inside arrange to sort values from largest to smallest (descending).\n\narrange(penguins, desc(bill_depth_mm))\n\n# A tibble: 344 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie    Torgers…           46            21.5               194        4200\n 2 Adelie    Torgers…           38.6          21.2               191        3800\n 3 Adelie    Dream              42.3          21.2               191        4150\n 4 Adelie    Torgers…           34.6          21.1               198        4400\n 5 Adelie    Dream              39.2          21.1               196        4150\n 6 Adelie    Biscoe             41.3          21.1               195        4400\n 7 Chinstrap Dream              54.2          20.8               201        4300\n 8 Adelie    Torgers…           42.5          20.7               197        4500\n 9 Adelie    Biscoe             39.6          20.7               191        3900\n10 Chinstrap Dream              52            20.7               210        4800\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nLastly, we can sort data based on multiple columns:\n\narrange(penguins, island, desc(bill_depth_mm))\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Biscoe           41.3          21.1               195        4400\n 2 Adelie  Biscoe           39.6          20.7               191        3900\n 3 Adelie  Biscoe           45.6          20.3               191        4600\n 4 Adelie  Biscoe           41            20                 203        4725\n 5 Adelie  Biscoe           37.8          20                 190        4250\n 6 Adelie  Biscoe           38.2          20                 190        3900\n 7 Adelie  Biscoe           42            19.5               200        4050\n 8 Adelie  Biscoe           42.2          19.5               197        4275\n 9 Adelie  Biscoe           35.9          19.2               189        3800\n10 Adelie  Biscoe           37.6          19.1               194        3750\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#distinct",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#distinct",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.7 Distinct",
    "text": "3.7 Distinct\nThe distinct() function returns all unique rows from the data frame. We can provide the names of the columns we want to search for unique combinations. Here we want to find all unique combinations of species and island.\n\ndistinct(penguins, species, island)\n\n# A tibble: 5 × 2\n  species   island   \n  &lt;fct&gt;     &lt;fct&gt;    \n1 Adelie    Torgersen\n2 Adelie    Biscoe   \n3 Adelie    Dream    \n4 Gentoo    Biscoe   \n5 Chinstrap Dream    \n\n\nIf we don’t specify any column names, the distinct() function will look for unique combinations across all columns.\n\ndistinct(penguins)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "LESSONS/Lesson-02_Working-with-tabular-data.html#grouping-and-summarizing-data",
    "href": "LESSONS/Lesson-02_Working-with-tabular-data.html#grouping-and-summarizing-data",
    "title": "Lesson 2: Working with tabular data",
    "section": "3.8 Grouping and Summarizing Data",
    "text": "3.8 Grouping and Summarizing Data\nWe started transforming these data because we wanted to extract some summary stats about the body mass and flipper length of the three penguin species in our data. With the functions we’ve used so far, we can extract the data we need for a specific penguin species. Here, we use the summarize() function to calculate the mean mean body mass and flipper length across all Gentoo penguins in our data.\n\npenguins |&gt; \n    filter(species == \"Gentoo\") |&gt; \n    select(species, flipper_length_mm, body_mass_g) |&gt; \n    # na.omit() |&gt; # Filter out any rows containing NA values in any columns\n    summarize(mean_body_mass_g = mean(body_mass_g),\n              mean_flipper_length_mm = mean(flipper_length_mm))\n\n# A tibble: 1 × 2\n  mean_body_mass_g mean_flipper_length_mm\n             &lt;dbl&gt;                  &lt;dbl&gt;\n1               NA                     NA\n\n\nIn this example we use dplyr functions and the pipe operator to filter our data for Gentoo penguins, select our columns of interest (body_mass_g and flipper_length_mm), and the summarize() function (also from dplyr) to calculate the mean values across data in the body_mass_g and flipper_length_mm columns.\n\n\n\n\n\n\nMissing Data\n\n\n\nThe first time we ran the code above, we didn’t use the na.omit() function and our mean body mass and flipper length calculations returned ‘NA’ values. ‘NA’ is one of the ways R represents missing data, and it turns out one of the penguins in our dataset has ‘NA’ values for all of its measurements (you can find it by looking through the data with the View() function). Many function that perform mathematical operations (like mean), will return an ‘NA’ value if any of its inputs are ‘NA’. This is so we’re aware there are ‘NA’ values present in our data and can handle them accordingly. Once we realized there was a single ‘NA’ values in our data, we excluded it using the na.omit() function.\n\n\nFrom this code, we see the general form of the summarize() function: summarize(dataset, column_name = expression). This is quite similar to the mutate() function. However, while the mutate() function performs a calculation for each row in a data frame column, the summarize() function performs one calculation using all of the data in a column.\nUsing the summarize() function we can quickly calculate summary stats from the columns in a data frame. In order to get the same summary stats for the other penguin data, we’d need to repeat the same set of operations two more times (one for each species). Ideally, we want to be able to work on data from all three penguin species at the same time.\nWe can do this with the group_by() function.\n\npenguins |&gt; \n    select(species, body_mass_g, flipper_length_mm) |&gt; \n    group_by(species) |&gt; \n    # This time we're using arguements in the mean function to remove the NA values\n    summarize(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE),\n              mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE))\n\n# A tibble: 3 × 3\n  species   mean_body_mass_g mean_flipper_length_mm\n  &lt;fct&gt;                &lt;dbl&gt;                  &lt;dbl&gt;\n1 Adelie               3701.                   190.\n2 Chinstrap            3733.                   196.\n3 Gentoo               5076.                   217.\n\n\nHere we use the group_by() function to group the data according to the species column, before using the summarize() function. This grouping causes the summarize() function to perform calculations across the data within each group (species, in this case), rather than across the entire data frame.\nThe means don’t give us the whole picture, so let’s calculate the standard deviations for each of these measurements, as well as the total number of penguins from each species.\n\npenguins |&gt; \n    select(species, body_mass_g, flipper_length_mm) |&gt; \n    group_by(species) |&gt; \n    na.omit() |&gt;\n    summarize(mean_body_mass_g = mean(body_mass_g),\n              sd_body_mass_g = sd(body_mass_g),\n              mean_flipper_length_mm = mean(flipper_length_mm),\n              sd_mean_flipper_length_mm = sd(flipper_length_mm),\n              Total_animals = n())\n\nIt looks like the raw numbers agree with what we saw in the figure we generated in the previous lesson. Namely, the Gentoo penguins tend to have more mass and longer flippers than the other two species. And while the Chinstrap penguins have higher mean body mass and flipper length than the Adélie penguins, the standard deviations in these measurements are large enough that there probably isn’t a significant difference in size between the two. In the coming lessons, we’ll apply some statistical tests to these data to test our hypotheses.\n\n\n\n\n\n\nNot all operations are equivalent\n\n\n\nSo far, we’ve seen two ways of keeping ‘NA’ values from affecting our calculations: 1. The na.omit() function removes all rows from a data frame that contain ‘NA’ values in any column. 2. The mean() and sd() have an na.rm argument that excludes all ‘NA’ values from the mean / standard deviation calculations when we set it to TRUE (na.rm = TRUE).\nWe used the na.omit() function to exclude the ‘NA’ values before we used the summarize() function to calculated all of our summary statistics above. However, if we skip the na.omit() function and instead use the “na.rm” argument for mean() and sd() to exclude the ‘NA’ values, we get a slightly different result.\n\npenguins |&gt; \n    select(species, body_mass_g, flipper_length_mm) |&gt; \n    group_by(species) |&gt; \n    # na.omit() |&gt; \n    summarize(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE),\n              sd_body_mass_g = sd(body_mass_g, na.rm = TRUE),\n              mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),\n              sd_mean_flipper_length_mm = sd(flipper_length_mm, na.rm = TRUE),\n              Total_animals = n())\n\n# A tibble: 3 × 6\n  species   mean_body_mass_g sd_body_mass_g mean_flipper_length_mm\n  &lt;fct&gt;                &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n1 Adelie               3701.           459.                   190.\n2 Chinstrap            3733.           384.                   196.\n3 Gentoo               5076.           504.                   217.\n# ℹ 2 more variables: sd_mean_flipper_length_mm &lt;dbl&gt;, Total_animals &lt;int&gt;\n\n\nCompare these results to the previous code using na.omit(), paying close attention to the “Total_animals” column. If there are too many columns in the results to compare them easily, you could always use the select() function to grab just the “species” and “Total_animals” columns.\nWhen we used the na.rm argument approach, we ended with with one extra penguin in the “Total_animals” column for the Adélie and Gentoo penguins. This is because the n() function counts rows, regardless of their contents (you can confirm there’s no na.rm argument for n() using the R docs). While there are many different ways to accomplish the same task, they are not all equivalent in all cases. If we weren’t also using the n() function to count the total number of penguins in each species, both of our methods for removing the ‘NA’ values would have produced the same result.\n\n\nEven though this is a toy example, we’ve created a flexible analysis pipeline by combining these dplyr functions, The code we’ve written will still work if we collect new data from different penguin species, add additional biological measurements beyond body mass and flipper length, or remove some of the rows from the original input data."
  }
]